apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  name: polaris-catalog-creator
  namespace: polaris
spec:
  backoffLimit: 2
  template:
    spec:
      containers:
      - command:
        - sh
        - -c
        - |-
          set -e
          apk add --no-cache jq curl

          token=$(curl -s http://polaris:8181/api/catalog/v1/oauth/tokens \
              --user ${CLIENT_ID}:${CLIENT_SECRET} \
              -d grant_type=client_credentials \
              -d scope=PRINCIPAL_ROLE:ALL | jq -r '.access_token')

          if [ -z "${token}" ]; then
              echo "Failed to obtain access token."
              exit 1
          fi

          echo
          echo "Obtained access token: ${token}"

          if [[ "$STORAGE_LOCATION" == s3* ]]; then
              STORAGE_TYPE="S3"
          else
              echo "Error: Only S3 storage is supported. STORAGE_LOCATION must start with 's3'."
              exit 1
          fi

          echo "Using StorageType: $STORAGE_TYPE"

          STORAGE_CONFIG_INFO="{\"storageType\": \"$STORAGE_TYPE\", \"allowedLocations\": [\"$STORAGE_LOCATION\"]}"
          if [[ "$STORAGE_TYPE" == "S3" ]]; then
              if [ -n "${AWS_ROLE_ARN}" ]; then
                  STORAGE_CONFIG_INFO=$(echo "$STORAGE_CONFIG_INFO" | jq --arg roleArn "$AWS_ROLE_ARN" '. + {roleArn: $roleArn}')
              else
                  echo "Warning: AWS_ROLE_ARN not set for S3 storage"
              fi
          fi

          response=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: Bearer ${token}" \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              "http://polaris:8181/api/management/v1/catalogs/${CATALOG_NAME}")

          status_code=$(echo "$response" | tail -n1)

          if [ "$status_code" -eq 200 ]; then
              echo "Catalog already exists, skipping creation..."
              exit 0
          elif [ "$status_code" -eq 404 ]; then
              echo "Catalog does not exist, proceeding..."
          else
              echo "$response"
              exit 1
          fi

          echo
          echo Creating a catalog named '$CATALOG_NAME'...

          PAYLOAD='{
              "catalog": {
                  "name": "'$CATALOG_NAME'",
                  "type": "INTERNAL",
                  "readOnly": false,
                  "properties": {
                      "default-base-location": "'$STORAGE_LOCATION'"
                  },
                  "storageConfigInfo": '$STORAGE_CONFIG_INFO'
              }
          }'

          echo $PAYLOAD

          curl -s -f -H "Authorization: Bearer ${token}" \
              -H 'Accept: application/json' \
              -H 'Content-Type: application/json' \
              http://polaris:8181/api/management/v1/catalogs \
              -d "$PAYLOAD" -v

          echo Done.
        env:
        - name: CATALOG_NAME
          value: ao_catalog
        - name: STORAGE_LOCATION
          value: s3://k8s-essence/
        - name: CLIENT_ID
          value: root
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: polaris-root-password
              name: polaris-root-password
        - name: AWS_ROLE_ARN
          valueFrom:
            secretKeyRef:
              key: SCALEWAY_ROLE_ARN
              name: iceberg-bucket-credentials
        image: alpine/curl
        name: create-catalog
      restartPolicy: OnFailure
