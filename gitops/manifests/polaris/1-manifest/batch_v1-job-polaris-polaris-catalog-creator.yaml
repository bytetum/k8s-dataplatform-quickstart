apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  name: polaris-catalog-creator
  namespace: polaris
spec:
  template:
    spec:
      containers:
      - command:
        - sh
        - -c
        - |-
          set -e
          apk add --no-cache jq curl

          echo 'Attempting to obtain access token...'
          token=$(curl -s --fail http://polaris:8181/api/catalog/v1/oauth/tokens \
            --user "${CLIENT_ID}:${CLIENT_SECRET}" \
            -d grant_type=client_credentials \
            -d scope=PRINCIPAL_ROLE:ALL | jq -r .access_token)

          if [ -z "${token}" ] || [ "${token}" = "null" ]; then
            echo 'Failed to obtain access token.'
            exit 1
          fi
          echo 'Successfully obtained access token.'

          STORAGE_TYPE="FILE"
          if [ -z "${STORAGE_LOCATION}" ]; then
              echo "STORAGE_LOCATION is not set, using FILE storage type"
              STORAGE_LOCATION="file:///var/tmp/quickstart_catalog/"
          else
              echo "STORAGE_LOCATION is set to '${STORAGE_LOCATION}'"
              if [[ "${STORAGE_LOCATION}" == s3* ]]; then
                  STORAGE_TYPE="S3"
              fi
              echo "Using StorageType: $STORAGE_TYPE"
          fi

          PAYLOAD=$(cat <<EOF
          {
            "catalog": {
              "name": "quickstart_catalog",
              "type": "INTERNAL",
              "readOnly": false,
              "properties": {
                "default-base-location": "'"$STORAGE_LOCATION"'"
              },
              "storageConfigInfo": ${STORAGE_CONFIG_INFO}
            }
          }
          EOF
          )

          echo 'Creating catalog...'
          curl -s -f -v -H "Authorization: Bearer ${token}" \
             -H 'Accept: application/json' \
             -H 'Content-Type: application/json' \
             http://polaris:8181/api/management/v1/catalogs \
             -d "$PAYLOAD"

          echo 'Done.'
        env:
        - name: STORAGE_LOCATION
          value: s3://k8s-essence/
        - name: CLIENT_ID
          value: root
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: polaris-root-password
              name: polaris-root-password
        - name: AWS_ROLE_ARN
          valueFrom:
            secretKeyRef:
              key: SCALEWAY_ROLE_ARN
              name: iceberg-bucket-credentials
        image: alpine/curl
        name: create-catalog
      initContainers:
      - command:
        - sh
        - -c
        - |-
          set -e
          max_attempts=15
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: Checking Polaris API health..."
            if curl --fail --silent --output /dev/null http://polaris-mgmt:8182/q/health/live; then
              echo "Polaris API is healthy!"
              exit 0
            fi
            echo "Waiting for Polaris API... (attempt $attempt of $max_attempts)"
            attempt=$((attempt + 1))
            sleep 5
          done
          echo "Polaris API did not become healthy after $max_attempts attempts."
          exit 1
        image: alpine/curl
        name: wait-for-polaris-api
      restartPolicy: OnFailure
